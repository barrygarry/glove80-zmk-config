/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ben_hold: ben_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "BEN_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <400>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        macro_cmd: macro_cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp M &kp D>;
            label = "MACRO_CMD";
        };

        macro_powershell: macro_powershell {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp O &kp W &kp E &kp R &kp S &kp H &kp E &kp L &kp L>;
            label = "MACRO_POWERSHELL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2             &kp F3                 &ben_hold RA(F4) F4  &kp F5                                                                                                                       &kp F6               &kp F7                   &ben_hold C_MUTE F8  &ben_hold C_VOLUME_DOWN F9  &ben_hold C_VOLUME_UP F10
&kp EQUAL   &kp N1             &kp N2                 &kp N3               &kp N4             &kp N5                                                                                 &kp N6             &kp N7               &kp N8                   &kp N9               &kp N0                      &kp MINUS
&kp TAB     &kp Q              &ben_hold RC(W) W      &ben_hold END E      &ben_hold LG(R) R  &ben_hold TAB T                                                                        &kp Y              &ben_hold RC(TAB) U  &ben_hold RC(RS(TAB)) I  &kp O                &kp P                       &kp BSLH
&kp ESC     &ben_hold LC(A) A  &ben_hold LG(LS(S)) S  &ben_hold LG(D) D    &lt 4 F            &lt 1 G                                                                                &ben_hold HOME H   &ben_hold LCMD J     &ben_hold RIGHT_ALT K    &ben_hold TAB L      &ben_hold SEMICOLON COLON   &kp SQT
&kp GRAVE   &ben_hold LC(Z) Z  &ben_hold RC(X) X      &ben_hold LC(C) C    &ben_hold LC(V) V  &kp B            &kp LSHFT  &kp LCTRL  &layer_td  &kp LGUI       &kp RCTRL  &kp RSHFT  &ben_hold RC(N) N  &ben_hold RC(T) M    &kp COMMA                &kp DOT              &kp FSLH                    &kp PG_UP
&magic 2 0  &kp HOME           &kp END                &kp LEFT             &kp RIGHT                           &kp BSPC   &kp DEL    &kp LALT   &kp RIGHT_ALT  &kp RET    &kp SPACE                     &kp UP               &kp DOWN                 &kp LBKT             &kp RBKT                    &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP    &kp C_PREV    &kp C_NEXT    &kp C_PP                                                                                  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                                        &kp NUMBER_6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &kp ESCAPE      &kp T         &kp W         &kp E         &kp R                                                         &kp RPAR      &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&kp Q         &kp LEFT_SHIFT  &kp A         &kp S         &kp D         &kp F                                                         &kp PRCNT     &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp TAB         &kp Z         &kp X         &kp C         &kp PG_DN  &trans     &trans  &to 0   &trans  &trans  &trans  &kp COMMA     &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS        &kp INS       &kp F11       &kp F12                  &kp SPACE  &trans  &trans  &trans  &trans  &trans                &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        layer_f {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans     &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans     &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp MINUS  &kp UP_ARROW  &kp UNDER  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp LEFT   &kp DOWN      &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans     &trans        &trans     &trans  &trans
            >;
        };
    };
};
